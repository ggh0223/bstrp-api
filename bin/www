#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
var db = require('../models');
const cron = require("node-cron");
const moment = require("moment");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

db.sequelize.sync(
    // {alter: true}
).then(function () {
  if (process.env.NODE_ENV === "production" && process.env.pm_id === "0") {
    console.log("production");
    cron.schedule('5 0 * * *', async () => {
      try {
        console.log('cron start');
        const result = await db.Advertisement.update({
          process_status: 'COMPLETED'
        },{
          where: {
            aprv_status: true,
            process_status: 'IN_PROGRESS',
            end_dt: {
              [db.Sequelize.Op.lte]: moment().format('YYYY-MM-DD HH:mm')
            }
          }
        });
        console.log('result', result);
        console.log('cron end');
      } catch (e) {
        console.log('cron error', e);
      }
   });
  }
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}).catch(function (err) {
    console.log(err);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
